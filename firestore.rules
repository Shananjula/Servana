rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    function isUserActive() {
      // Deny write access if the user is suspended. They can still read.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.status != 'suspended';
    }

    // --- Users Collection ---
    match /users/{userId} {
      allow read: if request.auth.uid == userId || isAdmin();
      allow create: if request.auth.uid == userId;
      allow update: if isAdmin() || (request.auth.uid == userId
        && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['isAdmin', 'status', 'trustScore']));

      match /notifications/{notificationId} {
        allow read, write: if request.auth.uid == userId || isAdmin();
      }
      match /transactions/{transactionId} {
        allow read: if request.auth.uid == userId || isAdmin();
        allow write: if false;
      }
    }

    // --- Tasks Collection ---
    match /tasks/{taskId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && isUserActive();
      allow update, delete: if isAdmin() || (request.auth.uid == resource.data.posterId && isUserActive());

      match /offers/{offerId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && isUserActive();
        allow update: if isAdmin() || (request.auth.uid == get(/databases/$(database)/documents/tasks/$(taskId)).data.posterId);
      }
      match /urgent_notifications_log/{logId} {
        allow read: if isAdmin();
        allow write: if false;
      }
    }

    // --- Chats Collection ---
    match /chats/{chatId} {
      allow read, write: if (request.auth.uid in resource.data.participantIds) || isAdmin();
      match /messages/{messageId} {
        allow read, create: if (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds) || isAdmin();
      }
    }

    // --- Verification Requests Collection ---
    match /verification_requests/{requestId} {
      allow read: if request.auth.uid == resource.data.userId || isAdmin();
      // --- THIS IS THE FIX ---
      // The rule now only checks if a user is logged in and active, which is more robust.
      allow create: if request.auth != null && isUserActive();
      allow update: if isAdmin();
    }

    // --- Reports Collection ---
    match /reports/{reportId} {
      allow create: if request.auth != null && isUserActive();
      allow read, update, delete: if isAdmin();
    }

    // --- Platform Settings ---
    match /settings/platform {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
  }
}
